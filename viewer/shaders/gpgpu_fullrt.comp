#version 430 core

layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

uniform sampler2D colorTexture;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform float lightIntensity;
uniform vec3 lightPosition;
uniform float shininess;
uniform int refractions;
uniform bool lightning;
uniform vec2 eta;
uniform vec3 bbmin;
uniform vec3 bbmax;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;
uniform bool animating;
uniform int animation_time;

#define MAX_SCENE_BOUNDS refractions+1
#define EPS                 0.000001


struct hitinfo_t {
    vec4 t;
    int hit_vptr;
};

struct Pt_t {
    vec4 origin;
    vec4 dir;
    vec4 pt_hit;
    vec4 normal;
    vec4 color;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

/*
* This function calculates the ambiant component of the Blinn-Phong model for lighting
*/
vec4 ambiant(vec4 color, float ka){
    return color*ka*lightIntensity;
}

/*
*This function calculates max(V1.V2,0), where V1 and V2 are both vec4 vectors.
*/
float max_scalar_zero(vec4 V1, vec4 V2) {
    float res = max(dot(V1,V2),0);
    return res;
}

/*
* This function calculates the diffuse component of the Blinn-Phong model for lighting
*/
vec4 diffuse(vec4 color,vec4 normal,vec4 LightVector, float kd){
    return color*max_scalar_zero(normal,LightVector)*kd*lightIntensity;
}

/*
* This function calculates the Fresnel coefficient
*/
// float fresnel_coeff(float cost){
//     float ci = abs(eta*eta + 1 - cost*cost) ;
//     ci = sqrt(ci);
//     float nume = cost - ci;
//     float denom = cost + ci;
//     float Fs = abs(nume/denom);
//     Fs = Fs*Fs;
//     nume = eta*eta*cost - ci;
//     denom = eta*eta*cost + ci;
//     float Fp = abs(nume/denom);
//     Fp = Fp * Fp;
//     return((Fs+Fp)/2);
//  }

float fresnel_coeff(float cost){
  vec2 eta2 = vec2(eta.x*eta.x - eta.y*eta.y, 2*eta.x*eta.y);
  vec2 tmp = eta2 + 1 - cost*cost;
  float x_ci = sqrt((tmp.x+sqrt(tmp.x*tmp.x+tmp.y+tmp.y))/2);
  float y_ci = tmp.y / (2*x_ci);
  vec2 ci = vec2(x_ci,y_ci);
  vec2 nume = cost - ci;
  vec2 denom = cost + ci;
  float Fs = abs(denom.x*denom.x + denom.y*denom.y);
  Fs = Fs*Fs;
  Fs = 1/Fs;
  float coef = nume.x*nume.x*denom.x*denom.x;
  coef += nume.y*nume.y*denom.y*denom.y;
  coef += nume.y*nume.y*denom.x*denom.x;
  coef += nume.x*nume.x*denom.y*denom.y;
  Fs = Fs * coef;
  nume = eta2*cost - ci;
  denom = eta2*cost + ci;
  float Fp = abs(denom.x*denom.x + denom.y*denom.y);
  Fp = Fp*Fp;
  Fp = 1/Fp;
  coef = nume.x*nume.x*denom.x*denom.x;
  coef += nume.y*nume.y*denom.y*denom.y;
  coef += nume.y*nume.y*denom.x*denom.x;
  coef += nume.x*nume.x*denom.y*denom.y;
  Fp = Fp * coef;
  return((Fs+Fp)/2);
 }

/*
* This function calculates the specular component of the Blinn-Phong model for ligthing
*/
vec4 specular_blinn(vec4 color, vec4 normal,vec3 toLightSource,vec4 direction){
    vec4 H = vec4(normalize(toLightSource-direction.xyz),1);
    float cost = dot(H,vec4(toLightSource,1));
    float F = fresnel_coeff(cost);
    // F = 1 ;
    float max = max_scalar_zero(normal,H);
    max = pow(max,shininess);
    return ( F*max* color *  lightIntensity);
}

bool intersectBoundingBox(vec4 origin, vec4 dir) {
    vec4 Pmin = vec4(bbmin,1);
    vec4 Pmax = vec4(bbmax,1);
    vec4 tmin = Pmin - origin;
    tmin = tmin / dir;
    vec4 tmax = Pmax - origin;
    tmax = tmax / dir;
    vec4 minimum = min(tmax,tmin);
    vec4 maximum = max(tmax,tmin);
    float In = max(minimum.x,minimum.y);
    In = max(In,minimum.z);
    float Out = min(maximum.x,maximum.y);
    Out = min(Out,maximum.z);
    return (Out > In);
}

bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist)
{
    vec4 e1 = vertices[indices[ptr+1]] - vertices[indices[ptr]] ;
    vec4 e2 = vertices[indices[ptr+2]] - vertices[indices[ptr]];
    vec4 t = origin - vertices[indices[ptr]];
    vec3 p_3 = cross(dir.xyz,e2.xyz);
    vec3 q_3 = cross(t.xyz,e1.xyz);
    vec4 p = vec4(p_3,0.0);
    vec4 q = vec4(q_3,0.0);
    float a = dot(p,e1);
    if (a > -EPS && a < EPS) {
        return false;
    }
    float coef = 1/a;
    float alpha = coef * dot(p,t);
    if (alpha < 0.0 || alpha > 1.0) {
        return false;
    }
    float beta = coef * dot(q,dir);
    if (beta < 0.0 || beta+alpha > 1.0) {
        return false;
    }
    float lambda = coef * dot(q,e2);
    if (10000.0 > lambda && lambda > EPS) {
        dist = vec4(alpha,beta,1-alpha-beta,lambda);
        return true;
    } else {
        return false;
    }
}

bool intersectGround(vec4 origin, vec4 dir, out float lambda) {
    vec4 normal = vec4(0.0,1.0,0.0,0.0);
    vec4 PQ = vec4(0.0,-groundDistance,0.0,1.0) - origin;
    float denom = dot(dir,normal);
    if (abs(denom) < EPS) {
        return false;
    }
    float lambda_temp = dot(PQ,normal) / denom;
    vec4 Point = origin + lambda_temp * dir;
    // on se restreint Ã  un plan circulaire de rayon radius
    if (lambda_temp > EPS && sqrt(Point.x*Point.x + Point.z*Point.z) < radius*10) {
        lambda = lambda_temp;
        return true;
    }
    lambda = 10000.0;
    return false;
}

vec4 interpolateNormal(hitinfo_t h)
{
    vec4 n0 = normals[indices[h.hit_vptr]];
    vec4 n1 = normals[indices[h.hit_vptr+1]];
    vec4 n2 = normals[indices[h.hit_vptr+2]];
    return h.t.z*n0+h.t.x*n1+h.t.y*n2;

}

vec4 interpolateColor(hitinfo_t h)
{
    vec4 colV0 = colors[indices[h.hit_vptr]];
    vec4 colV1 = colors[indices[h.hit_vptr+1]];
    vec4 colV2 = colors[indices[h.hit_vptr+2]];
	return h.t.z*colV0+h.t.x*colV1+h.t.y*colV2;
}

bool isIntersected(vec4 origin, vec4 dir, out hitinfo_t h)
{
    vec4 dist; // stores distance + barycentric coord
    float lambda; // stores the lambda value when there is a hit on the ground
    bool hit = false;
    vec4 normal = vec4(0.0,1.0,0.0,0.0);
    h.t.w = radius * 10;
    if(intersectBoundingBox(origin+10000000*EPS*dir, dir)) {
        for(int j = 0; j < indices.length(); j += 3) {
            if(intersectTriangle(origin+10000000*EPS*dir, dir, j, dist)) {
                hit = true ;
                if(dist.w<h.t.w){
                    h.t = dist;
                    h.hit_vptr = j;
                }
            }
        }
        if (intersectGround(origin,dir,lambda)) {
            if (intersectTriangle(origin,dir,h.hit_vptr,dist) && h.t.w < lambda) {
                h.t = dist;
            } else {
                h.t.w = lambda;
                h.hit_vptr = indices.length() + 1;
                hit = true;
            }
        } else {
            if (intersectTriangle(origin,dir,h.hit_vptr,dist)) {
                h.t = dist;
            }
        }
    } else if (intersectGround(origin,dir,lambda)) {
        h.t.w = lambda;
        h.hit_vptr = indices.length() + 1;
        hit = true;
    }
    return hit;
}

const int MAX_TRACE = 1;

vec4 trace(vec4 origin, vec4 dir)
{
    // origin = eye.
    hitinfo_t inter;
    if(isIntersected(origin,dir,inter)){
        if (inter.hit_vptr < indices.length() + 1) {
            // Intersection avec un triangle
            vec3 pointInter = origin.xyz + inter.t.w*dir.xyz;
            vec3 toLightSource = normalize(lightPosition-pointInter);
            hitinfo_t t ;
            if (isIntersected(vec4(pointInter.xyz-0.001*dir.xyz,1),vec4(toLightSource,1),t)){
                // Eclairage ambiant
                vec4 color = interpolateColor(inter);
                return ambiant(color,0.5);
            } else {
                // Eclairage total
                // return vec4(1,0,0,1);
                vec4 color = interpolateColor(inter);
                vec4 normal = interpolateNormal(inter);
                normal = normalize(normal);
                vec4  Ca = ambiant(color,0.5);
                vec4 Cd = diffuse(color,normal,vec4(toLightSource,0),0.5);
                vec4 Cs = specular_blinn(color,normal,toLightSource,dir);
                // return  Ca + Cd;
                return Ca + Cd + Cs ;
            }
        } else if (inter.hit_vptr == indices.length() + 1) {
            // Intersection avec le sol
            vec3 pointInter = origin.xyz + inter.t.w * dir.xyz;
            vec3 toLightSource = normalize(lightPosition-pointInter);
            hitinfo_t t;
            if (isIntersected(vec4(pointInter.xyz-0.001*dir.xyz,1),vec4(toLightSource,1),t)){
                // Eclairage ambiant
                vec4 color = texture2D(colorTexture,vec2(pointInter.x/radius,pointInter.z/radius));
                return ambiant(color,0.5);
            } else {
                // Eclairage total
                // return vec4(1,0,0,1);
                vec4 color = texture2D(colorTexture,vec2(pointInter.x/radius,pointInter.z/radius));
                vec4 normal = vec4(0.0,1.0,0.0,0.0);
                vec4  Ca = ambiant(color,0.5);
                vec4 Cd = diffuse(color,normal,vec4(toLightSource,0),0.5);
                vec4 Cs = specular_blinn(color,normal,toLightSource,dir);
                // return  Ca + Cd;
                return Ca + Cd + Cs ;
            }
        }
    } else {
        return vec4(0.7,0.7,0.7,1.0);
    }
}

bool fillBouncesArray(vec4 origin, vec4 dir,out Pt_t inter ){
  hitinfo_t info;
  if(isIntersected(origin+EPS*1000000*dir,dir,info)){
    inter.origin=origin;
    inter.dir=dir;
    inter.pt_hit = origin + info.t.w*dir;
    inter.normal = normalize(interpolateNormal(info));
    inter.color = trace(origin,dir);
    return true;
  }
  return false;
}

vec4 computeColor(in Pt_t tab[10]){
  int max_int = 0 ;
  vec4 color = vec4(0.7,0.7,0.7,1);
  while(tab[max_int].dir.x!=0){
    max_int +=1;
    if(max_int==MAX_SCENE_BOUNDS) break;
  }
  if(max_int>0){
    // max_int = 0 ssi il n'a avait aucun rebond de base
    max_int-=1;
    // max_int est maintenant sur le dernier indice non nul du tableau.
    color = tab[max_int].color;
    float dist_x, dist_y, dist, F, cost;
    vec4 H;
    vec3 toLightSource;
    while(max_int>0){
      // On rentre dans cette boucle si on avait des rebonds aprÃ¨s le premier impact
      max_int -=1;
      dist_x = tab[max_int].pt_hit.x-tab[max_int+1].pt_hit.x;
      dist_y = tab[max_int].pt_hit.y-tab[max_int+1].pt_hit.y;
      dist = 10000000*sqrt(dist_x*dist_x + dist_y*dist_y);
      // toLightSource = normalize(lightPosition-tab[max_int].pt_hit);
      // H = vec4(normalize(toLightSource-reflect(tab[max_int].dir,tab[max_int].normal).xyz),1);
      // cost = dot(H,vec4(toLightSource,1));
      // F = fresnel_coeff(cost);
      color.xyz =0.8*max(0.08,(1/dist))* color.xyz + tab[max_int].color.xyz;
      // if(tab[max_int].normal.y==1.0) color.xyz = tab[max_int].color.xyz;
      // color = vec4(1,0,0,1);
    }
  }
  return color;
}

vec4 traceRays(vec4 origin, vec4 dir){
  Pt_t inter_array[10];
  Pt_t current;
  Pt_t null = {vec4(0,0,0,0),vec4(0,0,0,0),vec4(0,0,0,0),vec4(0,0,0,0),vec4(0,0,0,1)};
  for(int i = 0 ; i<MAX_SCENE_BOUNDS; i++){
    if(fillBouncesArray(origin,dir,current)){
      inter_array[i]=current;
      origin = current.pt_hit;
      dir = reflect(dir,current.normal);
    }else{
      // Si on n'a pas rebondi => on sort ! ( on remplit le tableau de points vides)
      inter_array[i]=null;
      // return vec4(1,0,0,1);
    }
  }
  // On a le tableau rempli, il faut dÃ©terminer la couleur
  return computeColor(inter_array);
  // return inter_array[1].color;
}



layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    int num_pixel = animation_time;
    // vec4 color;
    // if(animating){
    //   // if(num_pixel==0){return;}
    //     if(mod(pix.x,2)==1 && mod(pix.y,2)==0){
    //       if(num_pixel!=1) return;
    //       // color = vec4(0,0,0,1);
    //     }
    //     if(mod(pix.x,2)==0 && mod(pix.y,2)==0){
    //       if(num_pixel!=0) return;
    //     }
    //     if(mod(pix.x,2)==0 && mod(pix.y,2)==1){
    //       if(num_pixel!=2) return;
    //     }
    //     if(mod(pix.x,2)==1 && mod(pix.y,2)==1){
    //       if(num_pixel!=3){
    //         // imageStore(framebuffer,pix,vec4(0,0,0,1));
    //         return;
    //         }
    //     }
    // }
    vec2 pos = pix / (size - vec2(0.5,0.5));
    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = 2 * pos - vec2(1.,1.);

    // Step 1: I need pixel coordinates.
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    vec4 color;
    if(lightning){
      color = trace(eye, dir);
    }else {
      color = traceRays(eye,dir);
    }
    // color=vec4(1,0,0,1);
    // if(mod(pix.x,2)==0 && mod(pix.y,2)==0){
    //   if(num_pixel==0){
    //     color = vec4(1,0,0,1);
    //   }
    // }
    imageStore(framebuffer, pix, color);
}
